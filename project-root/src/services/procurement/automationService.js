// project-root/src/services/procurement/automationService.js
import dayjs from 'dayjs';
import PurchaseRequisition from '../../models/PurchaseRequisition.js';

import { PR_STATUSES } from './constants.js';
import { getLowStockItems } from './stockService.js';
import { createRequisition } from './prService.js';

const AUTO_LOOKBACK_DAYS = Number(process.env.AUTO_PR_LOOKBACK_DAYS || 2);
const SAFETY_MULTIPLIER = Number(process.env.AUTO_PR_SAFETY_MULTIPLIER || 1.2);

async function hasRecentAutoPr(companyId, itemName) {
  const recentDate = dayjs().subtract(AUTO_LOOKBACK_DAYS, 'day').toDate();
  return PurchaseRequisition.exists({
    companyId,
    autoGenerated: true,
    status: { $nin: [PR_STATUSES.CANCELLED, PR_STATUSES.REJECTED] },
    createdAt: { $gte: recentDate },
    'items.itemName': itemName,
  });
}

function computeSuggestedQuantity(item) {
  const reorderPoint = Number(item.reorderPoint || 0);
  const currentQuantity = Number(item.currentQuantity || 0);
  let qty = Math.max(reorderPoint * SAFETY_MULTIPLIER - currentQuantity, reorderPoint || 1);
  if (!Number.isFinite(qty) || qty <= 0) qty = reorderPoint || 1;
  return Math.ceil(qty);
}

export async function runAutoReorder(companyId, actor = 'system') {
  if (!companyId) return [];
  const safetyDays = Number(process.env.PROCUREMENT_SAFETY_DAYS || 3);
  const lowStockItems = await getLowStockItems(companyId, { safetyDays });
  const created = [];

  for (const item of lowStockItems) {
    const exists = await hasRecentAutoPr(companyId, item.itemName);
    if (exists) continue;

    const quantity = computeSuggestedQuantity(item);
    const input = {
      companyId,
      requestedBy: actor,
      note: `Auto-generated from low stock detector (${dayjs().format('DD/MM HH:mm')})`,
      source: 'auto-low-stock',
      autoGenerated: true,
      items: [
        {
          itemName: item.itemName,
          quantity,
          unit: item.unit || 'ตัน',
          note: 'Generated by stock automation',
          currentStock: item.currentQuantity,
          threshold: item.reorderPoint,
        },
      ],
    };

    try {
      const pr = await createRequisition(input, actor);
      created.push(pr);
    } catch (err) {
      console.error('[PROCUREMENT][AUTO PR] failed for', item.itemName, err);
    }
  }

  return created;
}
