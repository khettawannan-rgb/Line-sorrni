// project-root/src/services/ai/advisor.js

function percent(n) {
  if (n === null || n === undefined || Number.isNaN(Number(n))) return '-';
  return `${Math.round(Number(n) * 100)}%`;
}

export function buildWeatherFlex({ dateLabel, locationName, status, temp, advice, detailsUrl }) {
  const now = new Date();
  const dateText = dateLabel || now.toLocaleDateString('th-TH', { dateStyle: 'medium' });
  return {
    type: 'flex',
    altText: '‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          { type: 'text', text: 'üå¶Ô∏è ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', weight: 'bold', size: 'lg' },
          { type: 'text', text: dateText, size: 'sm', color: '#AAAAAA' },
          locationName ? { type: 'text', text: locationName, size: 'sm', color: '#AAAAAA' } : undefined,
        ].filter(Boolean),
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          { type: 'text', text: `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${status || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}`, weight: 'bold', size: 'md', color: '#FF5555' },
          temp ? { type: 'text', text: `‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp}`, size: 'sm', margin: 'md' } : undefined,
          advice ? { type: 'text', text: `‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${advice}`, size: 'sm', color: '#555555', wrap: true, margin: 'md' } : undefined,
        ].filter(Boolean),
      },
      footer: {
        type: 'box',
        layout: 'horizontal',
        spacing: 'sm',
        contents: [
          { type: 'button', style: 'primary', action: { type: 'message', label: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', text: '‡∏™‡πà‡∏á mock data ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå' } },
          detailsUrl ? { type: 'button', style: 'secondary', action: { type: 'uri', label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', uri: detailsUrl } } : { type: 'spacer', size: 'sm' },
        ],
      },
    },
  };
}

export function analyzeWeatherSlots(weatherSlots = []) {
  // Find strongest impact slot
  const scored = (weatherSlots || []).map((w) => {
    const severity = (String(w.condition || '').includes('‡∏ù‡∏ô') ? 1 : 0) + (Number(w.rainProb || 0) / 100);
    return { ...w, severity };
  });
  scored.sort((a, b) => b.severity - a.severity);
  const worst = scored[0];
  const advice = worst && worst.severity > 0.8
    ? '‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏¥‡∏Å‡∏¢‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏π‡∏¢‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ù‡∏ô‡∏ï‡∏Å/‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ù‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≥'
    : worst && worst.severity > 0.4
    ? '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ú‡πâ‡∏≤‡πÉ‡∏ö‡∏Å‡∏±‡∏ô‡∏ù‡∏ô/‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô'
    : '‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠';
  return { worst, advice };
}

export function generateDailySummary({ weather = [], materials = [], location = {}, team = [] } = {}) {
  const { worst, advice } = analyzeWeatherSlots(weather);
  const head = `‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ‚Äì ${location.name || '‡πÑ‡∏ã‡∏ï‡πå‡∏á‡∏≤‡∏ô'}`;
  const wxLine = worst
    ? `‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ä‡πà‡∏ß‡∏á ${worst.time}: ${worst.condition}, ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ù‡∏ô ${worst.rainProb}%`
    : '‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: -';
  const matLine = (materials || [])
    .map((m) => `${m.name}: ${Number(m.stockTons || 0).toLocaleString('th-TH')} ‡∏ï‡∏±‡∏ô${m.moisture ? ` (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô ${m.moisture}%)` : ''}`)
    .join('\n');
  const teamLine = team?.length ? `‡∏ó‡∏µ‡∏°‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£: ${team.map((t) => t.name).join(', ')}` : '';
  return [
    `üì£ ${head}`,
    wxLine,
    teamLine,
    '',
    '‡∏ß‡∏±‡∏™‡∏î‡∏∏/‡∏™‡∏ï‡πá‡∏≠‡∏Å:',
    matLine || '-',
    '',
    `‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${advice}`,
  ].filter(Boolean).join('\n');
}

export function buildDailySummaryFlex({ weather = [], materials = [], location = {} } = {}) {
  const d = new Date();
  const dd = String(d.getDate()).padStart(2, '0');
  const mm = String(d.getMonth() + 1).padStart(2, '0');
  const yyyy = String(d.getFullYear());
  const dateSlash = `${dd}/${mm}/${yyyy}`;
  const { worst, advice } = analyzeWeatherSlots(weather);

  // Build inbound/outbound mock from materials
  const byQty = [...(materials || [])].sort((a, b) => (Number(b.stockTons || 0) - Number(a.stockTons || 0)));
  const pickIcon = (name = '') => {
    const n = String(name).toLowerCase();
    if (/(‡∏´‡∏¥‡∏ô|stone|aggregate|3\/4)/.test(n)) return 'ü™®';
    if (/(‡∏ù‡∏∏‡πà‡∏ô|dust|fine)/.test(n)) return 'üå´Ô∏è';
    if (/(‡∏ó‡∏£‡∏≤‡∏¢|sand)/.test(n)) return 'üèñÔ∏è';
    return 'üì¶';
  };
  const inboundItems = byQty.slice(0, 2).map((m) => `${pickIcon(m.name)} ${m.name}: ${Number(m.stockTons || 0).toLocaleString('th-TH')} ‡∏ï‡∏±‡∏ô`);
  const inboundTotal = byQty.slice(0, 2).reduce((a, m) => a + Number(m.stockTons || 0), 0);
  const outboundTons = Math.max(80, Math.round(inboundTotal * 1.4));

  const project = '‡∏à‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏£‡∏≤‡∏à‡∏£‡∏à‡∏≤‡∏Å 2 ‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏≤‡∏à‡∏£ ‡∏ó‡∏•.‡∏ó‡∏µ‡πà 12 ‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ';
  const place1 = location?.name || '‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏ß‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 311';
  const place2 = '‡∏ï‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° 0300 ‡∏ï‡∏≠‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô‡∏°‡πâ‡∏≤ ‚Äì ‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó';
  const span = '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á 1.455 ‡∏Å‡∏°. / ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà 31,485 ‡∏ï‡∏£.‡∏°.';
  const moreUrl = process.env.IO_MORE_URL || process.env.DAILY_IO_URL || 'https://app.nilasolutions.co/hmp/cm84i3gve7jm0cl01ayd6f2pj/inventory/analysis/weighbridge';

  const lines = [
    '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
    `üìå ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ${dateSlash}`,
    '',
    'üì• ‡∏Ç‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö)',
    ...(inboundItems.length ? inboundItems : ['‚Äî']),
    `‡∏£‡∏ß‡∏°‡∏Ç‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ : ${inboundTotal.toLocaleString('th-TH')} ‡∏ï‡∏±‡∏ô`,
    '',
    'üì§ ‡∏Ç‡∏≤‡∏≠‡∏≠‡∏Å',
    `üõ£Ô∏è ‡πÅ‡∏≠‡∏™‡∏ü‡∏±‡∏•‡∏ï‡πå‡∏ï‡∏¥‡∏Å‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï : ${outboundTons.toLocaleString('th-TH')} ‡∏ï‡∏±‡∏ô`,
    '',
    `‚û°Ô∏è ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: ${project}`,
    '',
    `üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${place1}`,
    place2,
    `üìè ${span}`,
    '',
    'üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
    advice,
    '',
    'üîó ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà :',
    moreUrl,
  ];

  return {
    type: 'flex',
    altText: '‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
    contents: {
      type: 'bubble',
      body: {
        type: 'box', layout: 'vertical', spacing: 'sm', contents: (
          lines.map((t) => ({ type: 'text', text: t, wrap: true, size: 'sm' }))
        ),
      },
      footer: {
        type: 'box', layout: 'horizontal', spacing: 'sm', contents: [
          { type: 'button', style: 'primary', action: { type: 'uri', label: '‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', uri: moreUrl } },
          { type: 'button', style: 'secondary', action: { type: 'message', label: '‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', text: '‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°' } },
        ],
      },
    },
  };
}

export function buildAdviceForConditions({ tempC, humidity, condition } = {}) {
  const tips = [];
  if (/‡∏ù‡∏ô/.test(String(condition || ''))) tips.push('‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏π‡∏¢‡∏≤‡∏á/‡∏°‡∏¥‡∏Å‡∏¢‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ù‡∏ô‡∏ï‡∏Å');
  if (Number(humidity) > 80) tips.push('‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
  if (Number(tempC) < 18) tips.push('‡∏≠‡∏∏‡πà‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
  if (!tips.length) tips.push('‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô');
  return tips;
}

export default {
  buildWeatherFlex,
  analyzeWeatherSlots,
  generateDailySummary,
  buildDailySummaryFlex,
  buildAdviceForConditions,
  percent,
};

// Additional helpers for tasks, chat, and CDP digest
export function buildTaskRecommendationsFlex(items = []) {
  const lines = (items || []).map((t, i) => {
    const tag = t.priority === 'high' ? 'üî¥' : t.priority === 'medium' ? 'üü†' : 'üü¢';
    const head = `${tag} ${t.message}`;
    const sub = [t.reason, t.suggest].filter(Boolean).join(' ‚Ä¢ ');
    return { type: 'box', layout: 'vertical', spacing: 'xs', contents: [
      { type: 'text', text: head, wrap: true, weight: 'bold', size: 'sm' },
      { type: 'text', text: sub || '-', wrap: true, size: 'xs', color: '#6B7280' },
    ]};
  });
  return {
    type: 'flex',
    altText: 'Task Recommendations',
    contents: {
      type: 'bubble',
      header: { type: 'box', layout: 'vertical', contents: [
        { type: 'text', text: 'üß≠ Task Recommendations', weight: 'bold', size: 'lg' },
        { type: 'text', text: '‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå', size: 'sm', color: '#AAAAAA' },
      ]},
      body: { type: 'box', layout: 'vertical', spacing: 'md', contents: lines.length ? lines : [ { type: 'text', text: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', size: 'sm' } ] },
    },
  };
}

export function buildChatTranscriptText(items = []) {
  const mapLine = (it) => {
    const t = new Date(it.time || Date.now()).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' });
    const body = it?.message?.type === 'text' ? it.message.text
      : it?.message?.type === 'image' ? '[‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢]'
      : it?.message?.type === 'location' ? `[‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á] ${it.message.title || ''}`
      : '[‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°]';
    return `${t} ‚Ä¢ ${it.from || 'user'}: ${body}`;
  };
  return ['‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ä‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', ...(items || []).slice(-10).map(mapLine)].join('\n');
}

export function buildChatTranscriptFlex(items = []) {
  const lines = (items || []).slice(-8).map((it) => {
    const t = new Date(it.time || Date.now()).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' });
    const body = it?.message?.type === 'text' ? it.message.text
      : it?.message?.type === 'image' ? '[‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢]'
      : it?.message?.type === 'location' ? `[‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á] ${it.message.title || ''}`
      : '[‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°]';
    return `${t} ‚Ä¢ ${it.from || 'user'}: ${body}`;
  });

  return {
    type: 'flex',
    altText: 'Chat Transcript',
    contents: {
      type: 'bubble',
      header: { type: 'box', layout: 'vertical', contents: [
        { type: 'text', text: 'üóíÔ∏è Chat Transcript', weight: 'bold', size: 'lg' },
        { type: 'text', text: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ä‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', size: 'sm', color: '#6B7280' },
      ]},
      body: {
        type: 'box', layout: 'vertical', spacing: 'sm', contents:
          (lines.length ? lines : ['‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•']).map((txt) => ({ type: 'text', text: txt, wrap: true, size: 'sm', color: '#0f172a' })),
      },
    },
  };
}

export function buildCdpDigestText(cdp = {}) {
  const s = cdp?.summary || {};
  const segs = (cdp?.segments || []).map((g) => `${g.label}: ${g.users}`).join(' ‚Ä¢ ');
  const preds = (cdp?.predictive || []).map((p) => `- ${p.message}`).join('\n');
  return [
    'üìä CDP Digest',
    `DAU: ${s.dailyActive || 0} ‚Ä¢ WAU: ${s.weeklyActive || 0}`,
    `New 7d: ${s.newUsers7d || 0} ‚Ä¢ Returning 7d: ${s.returning7d || 0}`,
    `Messages 7d: ${s.messages7d || 0}`,
    segs ? `Segments ‚Üí ${segs}` : '',
    preds ? '\nPredictive Alerts:\n' + preds : '',
  ].filter(Boolean).join('\n');
}

export { buildTaskRecommendationsFlex as buildTasksFlex, buildChatTranscriptText as buildChatText, buildCdpDigestText as buildCdpText };
