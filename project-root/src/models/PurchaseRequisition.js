// project-root/src/models/PurchaseRequisition.js
import mongoose from 'mongoose';

const { Schema } = mongoose;

const AttachmentSchema = new Schema(
  {
    filename: { type: String, required: true },
    originalName: { type: String, required: true },
    mimeType: { type: String, default: 'application/octet-stream' },
    size: { type: Number, default: 0 },
    url: { type: String, default: '' },
    uploadedAt: { type: Date, default: Date.now },
  },
  { _id: false }
);

const HistorySchema = new Schema(
  {
    action: { type: String, required: true },
    actor: { type: String, default: 'system' },
    remark: { type: String, default: '' },
    at: { type: Date, default: Date.now },
  },
  { _id: false }
);

const RequisitionItemSchema = new Schema(
  {
    itemName: { type: String, required: true },
    sku: { type: String, trim: true },
    quantity: { type: Number, required: true },
    unit: { type: String, default: 'ตัน' },
    projectCode: { type: String, default: '' },
    avgDailyUsage: { type: Number, default: 0 },
    projectedRunoutDate: { type: Date, default: null },
    threshold: { type: Number, default: 0 },
    currentStock: { type: Number, default: 0 },
    note: { type: String, default: '' },
  },
  { _id: false }
);

const PurchaseRequisitionSchema = new Schema(
  {
    prNumber: { type: String, required: true, unique: true },
    companyId: { type: Schema.Types.ObjectId, ref: 'Company', index: true },
    sourceSnapshotId: { type: Schema.Types.ObjectId, ref: 'StockSnapshot' },
    items: { type: [RequisitionItemSchema], default: [] },
    status: {
      type: String,
      enum: ['draft', 'pending_approval', 'approved', 'rejected', 'cancelled'],
      default: 'draft',
      index: true,
    },
    requestedBy: { type: String, required: true },
    requestedById: { type: Schema.Types.ObjectId, ref: 'Member' },
    approver: { type: String, default: '' },
    approvedAt: { type: Date, default: null },
    note: { type: String, default: '' },
    attachments: { type: [AttachmentSchema], default: [] },
    history: { type: [HistorySchema], default: [] },
    autoGenerated: { type: Boolean, default: false },
    source: {
      type: String,
      enum: ['manual', 'auto-low-stock', 'auto-forecast'],
      default: 'manual',
    },
    linkedPurchaseOrder: { type: Schema.Types.ObjectId, ref: 'PurchaseOrder' },
    metadata: {
      priority: { type: String, enum: ['low', 'medium', 'high'], default: 'medium' },
      forecastHorizonDays: { type: Number, default: 7 },
    },
  },
  { timestamps: true, strict: true }
);

PurchaseRequisitionSchema.index(
  { status: 1, createdAt: -1 },
  { name: 'by_pr_status_created' }
);
PurchaseRequisitionSchema.index(
  { companyId: 1, createdAt: -1 },
  { name: 'by_pr_company_created' }
);

const PurchaseRequisition = mongoose.model('PurchaseRequisition', PurchaseRequisitionSchema);
export default PurchaseRequisition;
