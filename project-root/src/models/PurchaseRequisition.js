import mongoose from 'mongoose';

const { Schema } = mongoose;

const STATUS_ENUM = ['draft', 'waiting_approval', 'approved', 'rejected', 'closed'];

const AttachmentSchema = new Schema(
  {
    filename: { type: String, required: true },
    originalName: { type: String, required: true },
    mimeType: { type: String, default: 'application/octet-stream' },
    size: { type: Number, default: 0 },
    url: { type: String, default: '' },
    uploadedAt: { type: Date, default: Date.now },
  },
  { _id: false }
);

const HistorySchema = new Schema(
  {
    action: { type: String, required: true },
    actor: { type: String, default: 'system' },
    remark: { type: String, default: '' },
    at: { type: Date, default: Date.now },
  },
  { _id: false }
);

const ApproverSchema = new Schema(
  {
    name: { type: String, required: true },
    status: { type: String, enum: ['pending', 'approved', 'rejected'], default: 'pending' },
    actedAt: { type: Date, default: null },
    remark: { type: String, default: '' },
  },
  { _id: false }
);

const RequisitionLineSchema = new Schema(
  {
    sku: { type: String, trim: true },
    description: { type: String, required: true },
    quantity: { type: Number, required: true, min: 0 },
    uom: { type: String, default: 'EA' },
    unitPrice: { type: Number, default: 0 },
    amount: { type: Number, default: 0 },
    notes: { type: String, default: '' },
  },
  { _id: false }
);

const PurchaseRequisitionSchema = new Schema(
  {
    prNumber: { type: String, required: true, unique: true },
    companyId: { type: Schema.Types.ObjectId, ref: 'Company', index: true },
    requester: { type: String, required: true },
    requesterId: { type: Schema.Types.ObjectId, ref: 'Member' },
    vendorId: { type: Schema.Types.ObjectId, ref: 'Vendor' },
    currency: { type: String, default: 'THB' },
    lines: { type: [RequisitionLineSchema], default: [] },
    subtotal: { type: Number, default: 0 },
    taxRate: { type: Number, default: 0.07 },
    taxAmount: { type: Number, default: 0 },
    total: { type: Number, default: 0 },
    status: {
      type: String,
      enum: STATUS_ENUM,
      default: 'draft',
      index: true,
    },
    source: {
      type: String,
      enum: ['manual', 'auto-low-stock', 'auto-forecast'],
      default: 'manual',
    },
    autoGenerated: { type: Boolean, default: false },
    notes: { type: String, default: '' },
    attachments: { type: [AttachmentSchema], default: [] },
    approvers: { type: [ApproverSchema], default: [] },
    approvedAt: { type: Date, default: null },
    approvedBy: { type: String, default: '' },
    rejectionReason: { type: String, default: '' },
    linkedPurchaseOrder: { type: Schema.Types.ObjectId, ref: 'PurchaseOrder' },
    history: { type: [HistorySchema], default: [] },
  },
  { timestamps: true, strict: true }
);

PurchaseRequisitionSchema.index({ status: 1, createdAt: -1 }, { name: 'by_pr_status_created' });
PurchaseRequisitionSchema.index({ requester: 1, createdAt: -1 }, { name: 'by_pr_requester' });
PurchaseRequisitionSchema.index({ vendorId: 1, createdAt: -1 }, { name: 'by_pr_vendor' });

const PurchaseRequisition = mongoose.model('PurchaseRequisition', PurchaseRequisitionSchema);
export default PurchaseRequisition;
